class MobileSudokuTetris {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.piecesContainer = document.getElementById('piecesContainer');
        
        this.BOARD_SIZE = 9;
        this.CELL_SIZE = 40; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
        this.canvas.width = this.BOARD_SIZE * this.CELL_SIZE;
        this.canvas.height = this.BOARD_SIZE * this.CELL_SIZE;
        
        this.board = Array(this.BOARD_SIZE).fill().map(() => Array(this.BOARD_SIZE).fill(0));
        
        this.score = 0;
        this.level = 1;
        this.lines = 0;
        this.gameRunning = true;
        this.record = this.loadRecord();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.draggedPiece = null;
        this.dragOffset = { x: 0, y: 0 };
        this.isDragging = false;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.touchMoved = false;
        this.isTouchDragging = false;
        this.TOUCH_LIFT_BASE = this.CELL_SIZE * 0.85;
        this.MIN_TOUCH_LIFT = this.CELL_SIZE * 0.3;
        this.touchLiftOffset = this.TOUCH_LIFT_BASE;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        this.selectedPiece = null;
        this.selectedPieceElement = null;
        
        // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
        this.tetrisPieces = [
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã —Ç–µ—Ç—Ä–∏—Å–∞
            {
                id: 'I',
                name: '–õ–∏–Ω–∏—è',
                shape: [[1, 1, 1, 1]],
                color: '#e53e3e',
                size: 4
            },
            {
                id: 'O',
                name: '–ö–≤–∞–¥—Ä–∞—Ç',
                shape: [
                    [1, 1],
                    [1, 1]
                ],
                color: '#38a169',
                size: 2
            },
            {
                id: 'T',
                name: '–¢-–æ–±—Ä–∞–∑–Ω–∞—è',
                shape: [
                    [0, 1, 0],
                    [1, 1, 1]
                ],
                color: '#3182ce',
                size: 3
            },
            {
                id: 'S',
                name: 'S-–æ–±—Ä–∞–∑–Ω–∞—è',
                shape: [
                    [0, 1, 1],
                    [1, 1, 0]
                ],
                color: '#d69e2e',
                size: 3
            },
            {
                id: 'Z',
                name: 'Z-–æ–±—Ä–∞–∑–Ω–∞—è',
                shape: [
                    [1, 1, 0],
                    [0, 1, 1]
                ],
                color: '#805ad5',
                size: 3
            },
            {
                id: 'J',
                name: 'J-–æ–±—Ä–∞–∑–Ω–∞—è',
                shape: [
                    [1, 0, 0],
                    [1, 1, 1]
                ],
                color: '#dd6b20',
                size: 3
            },
            {
                id: 'L',
                name: 'L-–æ–±—Ä–∞–∑–Ω–∞—è',
                shape: [
                    [0, 0, 1],
                    [1, 1, 1]
                ],
                color: '#38b2ac',
                size: 3
            },
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
            {
                id: 'CROSS',
                name: '–ö—Ä–µ—Å—Ç',
                shape: [
                    [0, 1, 0],
                    [1, 1, 1],
                    [0, 1, 0]
                ],
                color: '#9f7aea',
                size: 3
            },
            {
                id: 'CORNER',
                name: '–£–≥–æ–ª–æ–∫',
                shape: [
                    [1, 1],
                    [1, 0]
                ],
                color: '#ed8936',
                size: 2
            },
            {
                id: 'LINE3',
                name: '–¢—Ä–æ–π–∫–∞',
                shape: [[1, 1, 1]],
                color: '#48bb78',
                size: 3
            },
            {
                id: 'LINE2',
                name: '–î–≤–æ–π–∫–∞',
                shape: [[1, 1]],
                color: '#4299e1',
                size: 2
            },
            {
                id: 'DOT',
                name: '–¢–æ—á–∫–∞',
                shape: [[1]],
                color: '#f56565',
                size: 1
            },
            {
                id: 'LONG',
                name: '–î–ª–∏–Ω–Ω–∞—è',
                shape: [[1, 1, 1, 1, 1]],
                color: '#68d391',
                size: 5
            },
            {
                id: 'STAIRS',
                name: '–õ–µ—Å—Ç–Ω–∏—Ü–∞',
                shape: [
                    [1, 0, 0],
                    [1, 1, 0],
                    [1, 1, 1]
                ],
                color: '#4fd1c7',
                size: 3
            },
            {
                id: 'SMALLT',
                name: '–ú–∞–ª–µ–Ω—å–∫–∞—è –¢',
                shape: [
                    [0, 1, 0],
                    [1, 1, 1]
                ],
                color: '#f6ad55',
                size: 3
            },
            {
                id: 'PLUS',
                name: '–ü–ª—é—Å',
                shape: [
                    [0, 1, 0],
                    [1, 1, 1],
                    [0, 1, 0]
                ],
                color: '#9f7aea',
                size: 3
            },
            {
                id: 'L_SHAPE',
                name: 'L-—Ñ–æ—Ä–º–∞',
                shape: [
                    [1, 0],
                    [1, 0],
                    [1, 1]
                ],
                color: '#38b2ac',
                size: 3
            },
            {
                id: 'LINE4',
                name: '–ß–µ—Ç–≤–µ—Ä–∫–∞',
                shape: [[1, 1, 1, 1]],
                color: '#48bb78',
                size: 4
            },
            {
                id: 'CORNER3',
                name: '–£–≥–æ–ª–æ–∫ 3',
                shape: [
                    [1, 1],
                    [1, 0],
                    [1, 0]
                ],
                color: '#ed8936',
                size: 3
            },
            {
                id: 'ZIGZAG',
                name: '–ó–∏–≥–∑–∞–≥',
                shape: [
                    [1, 1, 0],
                    [0, 1, 1],
                    [0, 0, 1]
                ],
                color: '#805ad5',
                size: 3
            },
            {
                id: 'HOOK',
                name: '–ö—Ä—é—á–æ–∫',
                shape: [
                    [1, 1],
                    [1, 0],
                    [1, 1]
                ],
                color: '#dd6b20',
                size: 3
            },
            {
                id: 'DIAMOND',
                name: '–†–æ–º–±',
                shape: [
                    [0, 1, 0],
                    [1, 1, 1],
                    [0, 1, 0]
                ],
                color: '#38a169',
                size: 3
            },
            {
                id: 'CROSS2',
                name: '–ö—Ä–µ—Å—Ç 2',
                shape: [
                    [1, 0, 1],
                    [0, 1, 0],
                    [1, 0, 1]
                ],
                color: '#3182ce',
                size: 3
            },
            {
                id: 'LONG4',
                name: '–î–ª–∏–Ω–Ω–∞—è 4',
                shape: [[1, 1, 1, 1]],
                color: '#d69e2e',
                size: 4
            },
            {
                id: 'BLOCK',
                name: '–ë–ª–æ–∫',
                shape: [
                    [1, 1],
                    [1, 1],
                    [1, 0]
                ],
                color: '#f56565',
                size: 3
            }
        ];
        
        this.availablePieces = [];
        
        // –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –∂–µ–Ω—ã
        this.compliments = [
            "–¢—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∂–µ–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–µ! üíï",
            "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –¥–µ–ª–∞–µ—Ç –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üòä",
            "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞—è! üß†‚ú®",
            "–° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫! üéâ",
            "–¢—ã –º–æ—è —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –∏ –¥–æ—Ä–æ–≥–∞—è! üíñ",
            "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ —Å–æ–≥—Ä–µ–≤–∞–µ—Ç –º–æ–µ —Å–µ—Ä–¥—Ü–µ! ‚ù§Ô∏è",
            "–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è –º–∞–º–∞ –∏ –∂–µ–Ω–∞! üë©‚Äçüëß‚Äçüë¶",
            "–¢–≤–æ—è –∫—Ä–∞—Å–æ—Ç–∞ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞–µ—Ç! üåü",
            "–° —Ç–æ–±–æ–π —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Å–∞–º—ã–º —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! üòç",
            "–¢—ã –º–æ–π –∞–Ω–≥–µ–ª-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å! üëº",
            "–¢–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –≤–æ –≤—Å–µ–º! ü¶â",
            "–¢—ã —Å–∞–º–∞—è –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è! ü§ó",
            "–¢–≤–æ—è –ª—é–±–æ–≤—å - —ç—Ç–æ –º–æ–π –¥–æ–º! üè†üíï",
            "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å –º–µ–Ω—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí´",
            "–¢–≤–æ—è –∫—Ä–∞—Å–æ—Ç–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω—è—è, –Ω–æ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è! üå∏",
            "–° —Ç–æ–±–æ–π —è –º–æ–≥—É –≤—Å–µ! üí™‚ù§Ô∏è",
            "–¢—ã –º–æ–µ —Å–æ–ª–Ω—ã—à–∫–æ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å! ‚òÄÔ∏è",
            "–¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–Ω–∞—á–∏—Ç –¥–ª—è –º–µ–Ω—è –≤—Å–µ! ü§ù",
            "–¢—ã —Å–∞–º–∞—è —Ç–µ—Ä–ø–µ–ª–∏–≤–∞—è –∏ –ø–æ–Ω–∏–º–∞—é—â–∞—è! üôè",
            "–¢–≤–æ—è –ª—é–±–æ–≤—å –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –ª—É—á—à–µ! üíù"
        ];
        
        this.init();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫—É–±–∏–∫–æ–≤ –≤ —Ñ–∏–≥—É—Ä–µ
    countCubes(shape) {
        let count = 0;
        for (let y = 0; y < shape.length; y++) {
            for (let x = 0; x < shape[y].length; x++) {
                if (shape[y][x]) count++;
            }
        }
        return count;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π
    selectPiece(piece, element) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
        this.clearSelection();
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
        this.selectedPiece = piece;
        this.selectedPieceElement = element;
        element.classList.add('selected');
    }
    
    clearSelection() {
        if (this.selectedPieceElement) {
            this.selectedPieceElement.classList.remove('selected');
        }
        this.selectedPiece = null;
        this.selectedPieceElement = null;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ—Ä–¥–æ–º
    loadRecord() {
        const saved = localStorage.getItem('sudokuTetrisRecord');
        return saved ? parseInt(saved) : 0;
    }
    
    saveRecord(score) {
        if (score > this.record) {
            this.record = score;
            localStorage.setItem('sudokuTetrisRecord', score.toString());
            return true; // –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        }
        return false;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    saveGameState() {
        const gameState = {
            board: this.board,
            score: this.score,
            level: this.level,
            lines: this.lines,
            availablePieces: this.availablePieces,
            gameRunning: this.gameRunning,
            timestamp: Date.now()
        };
        
        try {
            localStorage.setItem('sudokuTetrisGameState', JSON.stringify(gameState));
            console.log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
        }
    }
    
    
    loadGameState() {
        try {
            const saved = localStorage.getItem('sudokuTetrisGameState');
            if (saved) {
                const gameState = JSON.parse(saved);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
                const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                if (Date.now() - gameState.timestamp > maxAge) {
                    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
                    return false;
                }
                
                this.board = gameState.board;
                this.score = gameState.score;
                this.level = gameState.level;
                this.lines = gameState.lines;
                this.availablePieces = gameState.availablePieces;
                this.gameRunning = gameState.gameRunning;
                
                console.log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                return true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã:', error);
        }
        return false;
    }
    
    clearGameState() {
        try {
            localStorage.removeItem('sudokuTetrisGameState');
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—á–∏—â–µ–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ —Ñ–∏–≥—É—Ä—ã –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
    rotateShape(shape) {
        const rows = shape.length;
        const cols = shape[0].length;
        const rotated = Array(cols).fill().map(() => Array(rows).fill(0));
        
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                rotated[j][rows - 1 - i] = shape[i][j];
            }
        }
        
        return rotated;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ —Ñ–∏–≥—É—Ä—ã
    createShapeVariants(originalPiece) {
        const variants = [];
        let currentShape = originalPiece.shape;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–∏–≥—É—Ä—É
        variants.push({
            ...originalPiece,
            variant: 0,
            shape: currentShape
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç—ã (–º–∞–∫—Å–∏–º—É–º 3 –ø–æ–≤–æ—Ä–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        for (let i = 1; i < 4; i++) {
            currentShape = this.rotateShape(currentShape);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –ø–æ–≤–æ—Ä–æ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º –æ—Ä–∏–≥–∏–Ω–∞–ª—É
            const isDuplicate = variants.some(variant => 
                JSON.stringify(variant.shape) === JSON.stringify(currentShape)
            );
            
            if (!isDuplicate) {
                variants.push({
                    ...originalPiece,
                    variant: i,
                    shape: currentShape,
                    name: `${originalPiece.name} (${i * 90}¬∞)`
                });
            } else {
                break; // –ï—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            }
        }
        
        return variants;
    }
    
    init() {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É
        const gameLoaded = this.loadGameState();
        
        if (!gameLoaded) {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            this.generatePieces();
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            this.renderPieces(false);
        }
        
        this.draw();
        this.setupEventListeners();
        this.updateUI();
    }
    
    generatePieces() {
        this.availablePieces = [];
        const piecesToGenerate = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä –Ω–∞ –ø–∞–Ω–µ–ª–∏
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–≥—É—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–∞–∫—Å–∏–º—É–º 5 –∫—É–±–∏–∫–æ–≤)
        const validPieces = this.tetrisPieces.filter(piece => {
            const cubeCount = this.countCubes(piece.shape);
            return cubeCount <= 5;
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–î–ª–∏–Ω–Ω–∞—è" –∏–∑ 5-–∫—É–±–∏–∫–æ–≤—ã—Ö
        const finalPieces = validPieces.filter(piece => {
            const cubeCount = this.countCubes(piece.shape);
            if (cubeCount === 5) {
                return piece.id === 'LONG'; // –¢–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω–∞—è –ª–∏–Ω–∏—è
            }
            return true; // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
        });
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–≥—É—Ä —Å –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏
        const allVariants = [];
        finalPieces.forEach(piece => {
            const variants = this.createShapeVariants(piece);
            allVariants.push(...variants);
        });
        
        for (let i = 0; i < piecesToGenerate; i++) {
            const randomIndex = Math.floor(Math.random() * allVariants.length);
            const piece = JSON.parse(JSON.stringify(allVariants[randomIndex]));
            piece.uniqueId = `piece_${i}_${Date.now()}`;
            this.availablePieces.push(piece);
        }
        
        this.renderPieces(true); // –° –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
        this.checkGameOver();
    }
    
    renderPieces(animate = false) {
        this.piecesContainer.innerHTML = '';
        
        this.availablePieces.forEach((piece, index) => {
            const pieceElement = document.createElement('div');
            pieceElement.className = 'piece-item';
            pieceElement.draggable = true;
            pieceElement.dataset.pieceId = piece.uniqueId;
            
            const canvas = document.createElement('canvas');
            canvas.className = 'piece-canvas';
            canvas.width = piece.size * 20;
            canvas.height = piece.size * 20;
            
            const ctx = canvas.getContext('2d');
            this.drawPieceOnCanvas(ctx, piece, 20);
            
            pieceElement.appendChild(canvas);
            this.piecesContainer.appendChild(pieceElement);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ animate = true
            if (animate) {
                setTimeout(() => {
                    pieceElement.classList.add('appearing');
                    
                    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    setTimeout(() => {
                        pieceElement.classList.remove('appearing');
                    }, 600); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                }, index * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ–∏–≥—É—Ä–∞–º–∏
            }
        });
    }
    
    drawPieceOnCanvas(ctx, piece, cellSize) {
        ctx.fillStyle = piece.color;
        ctx.strokeStyle = '#4a5568';
        ctx.lineWidth = 1;
        
        for (let y = 0; y < piece.shape.length; y++) {
            for (let x = 0; x < piece.shape[y].length; x++) {
                if (piece.shape[y][x]) {
                    ctx.fillRect(x * cellSize, y * cellSize, cellSize - 1, cellSize - 1);
                    ctx.strokeRect(x * cellSize, y * cellSize, cellSize - 1, cellSize - 1);
                }
            }
        }
    }
    
    calculatePieceHeight(piece) {
        if (!piece || !piece.shape) {
            return 0;
        }

        let firstRow = -1;
        let lastRow = -1;

        for (let y = 0; y < piece.shape.length; y++) {
            if (piece.shape[y].some(cell => cell)) {
                if (firstRow === -1) {
                    firstRow = y;
                }
                lastRow = y;
            }
        }

        if (firstRow === -1) {
            return 0;
        }

        return lastRow - firstRow + 1;
    }

    computeTouchLiftOffset(piece) {
        const height = Math.max(1, this.calculatePieceHeight(piece));
        const gap = this.CELL_SIZE * 0.2;
        const rawLift = height * this.CELL_SIZE - gap;
        const minLift = this.CELL_SIZE * 0.8;
        const maxLift = this.CELL_SIZE * 2.2;
        const clamped = Math.max(minLift, Math.min(rawLift, maxLift));
        const sizedLift = Math.max(this.TOUCH_LIFT_BASE, clamped);
        return Math.max(this.MIN_TOUCH_LIFT, sizedLift);
    }

    getEffectiveTouchLift(touchClientY, canvasRect) {
        const fullLift = this.touchLiftOffset;
        const distanceToBottom = this.canvas.height - (touchClientY - canvasRect.top);
        const safeBuffer = this.CELL_SIZE * 0.25;
        const minLift = this.MIN_TOUCH_LIFT;

        if (distanceToBottom <= fullLift + safeBuffer) {
            const maxLiftBySpace = Math.max(0, distanceToBottom - safeBuffer);
            return Math.max(minLift, Math.min(fullLift, maxLiftBySpace));
        }

        return Math.max(minLift, fullLift);
    }


    setupEventListeners() {
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è canvas
        this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e));
        this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e));
        this.canvas.addEventListener('touchend', (e) => this.handleTouchEnd(e));
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–∏–≥—É—Ä - touch —Å–æ–±—ã—Ç–∏—è
        this.piecesContainer.addEventListener('touchstart', (e) => this.handlePieceTouchStart(e), { passive: false });
        this.piecesContainer.addEventListener('touchmove', (e) => this.handlePieceTouchMove(e), { passive: false });
        this.piecesContainer.addEventListener('touchend', (e) => this.handlePieceTouchEnd(e), { passive: false });
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–∏–≥—É—Ä - mouse —Å–æ–±—ã—Ç–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ü–ö)
        this.piecesContainer.addEventListener('mousedown', (e) => this.handlePieceMouseStart(e));
        this.piecesContainer.addEventListener('mousemove', (e) => this.handlePieceMouseMove(e));
        this.piecesContainer.addEventListener('mouseup', (e) => this.handlePieceMouseEnd(e));
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('backBtn').addEventListener('click', () => this.restart());
        document.getElementById('settingsBtn').addEventListener('click', () => this.clearBoard());
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        document.addEventListener('touchmove', (e) => {
            if (this.isDragging) {
                e.preventDefault();
            }
        }, { passive: false });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        this.piecesContainer.addEventListener('contextmenu', (e) => e.preventDefault());
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        document.addEventListener('mousemove', (e) => this.handlePieceMouseMove(e));
        document.addEventListener('mouseup', (e) => this.handlePieceMouseEnd(e));
    }
    
    handlePieceTouchStart(e) {
        const pieceElement = e.target.closest('.piece-item');
        if (!pieceElement) return;
        
        const pieceId = pieceElement.dataset.pieceId;
        const piece = this.availablePieces.find(p => p.uniqueId === pieceId);
        
        if (piece) {
            this.selectPiece(piece, pieceElement);
            
            this.draggedPiece = piece;
            this.isDragging = true;
            this.isTouchDragging = true;
            this.touchLiftOffset = this.computeTouchLiftOffset(piece);
            pieceElement.classList.add('dragging');
            
            const touch = e.touches[0];
            const rect = pieceElement.getBoundingClientRect();
            this.dragOffset = {
                x: touch.clientX - rect.left,
                y: touch.clientY - rect.top
            };
            
            this.touchStartX = touch.clientX;
            this.touchStartY = touch.clientY;
            this.touchMoved = false;
            
            e.preventDefault();
        }
    }
    
    handlePieceTouchMove(e) {
        if (!this.isDragging || !this.draggedPiece) return;
        
        const touch = e.touches[0];
        const canvasRect = this.canvas.getBoundingClientRect();
        
        const deltaX = Math.abs(touch.clientX - this.touchStartX);
        const deltaY = Math.abs(touch.clientY - this.touchStartY);
        if (deltaX > 5 || deltaY > 5) {
            this.touchMoved = true;
        }
        
        const canvasX = touch.clientX - canvasRect.left;
        const effectiveLift = this.getEffectiveTouchLift(touch.clientY, canvasRect);
        const rawCanvasY = touch.clientY - canvasRect.top - effectiveLift;
        const adjustedCanvasY = Math.max(0, rawCanvasY);
        
        const gridX = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasX / this.CELL_SIZE)));
        const gridY = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(adjustedCanvasY / this.CELL_SIZE)));
        
        this.drawWithPreview(gridX, gridY, this.canPlacePiece(this.draggedPiece, gridX, gridY));
        
        e.preventDefault();
    }
    
    handlePieceTouchEnd(e) {
        if (!this.isDragging || !this.draggedPiece) return;
        
        const touch = e.changedTouches[0];
        const canvasRect = this.canvas.getBoundingClientRect();
        
        const effectiveLift = this.getEffectiveTouchLift(touch.clientY, canvasRect);
        const dynamicMargin = Math.max(10, effectiveLift + this.CELL_SIZE * 0.5);
        if (touch.clientX >= canvasRect.left - dynamicMargin && touch.clientX <= canvasRect.right + dynamicMargin &&
            touch.clientY >= canvasRect.top - dynamicMargin && touch.clientY <= canvasRect.bottom + dynamicMargin) {
            
            const canvasX = touch.clientX - canvasRect.left;
            const rawCanvasY = touch.clientY - canvasRect.top - effectiveLift;
            const adjustedCanvasY = Math.max(0, rawCanvasY);
            
            const gridX = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasX / this.CELL_SIZE)));
            const gridY = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(adjustedCanvasY / this.CELL_SIZE)));
            
            if (this.touchMoved && this.canPlacePiece(this.draggedPiece, gridX, gridY)) {
                this.placePiece(this.draggedPiece, gridX, gridY);
            }
        }
        
        this.isDragging = false;
        this.draggedPiece = null;
        this.touchMoved = false;
        this.isTouchDragging = false;
        this.touchLiftOffset = this.TOUCH_LIFT_BASE;
        
        document.querySelectorAll('.piece-item').forEach(el => {
            el.classList.remove('dragging');
        });
        
        this.clearSelection();
        
        this.draw();
        e.preventDefault();
    }
    
    handleTouchStart(e) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—á–µ–π –ø–æ canvas (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
        e.preventDefault();
    }
    
    handleTouchMove(e) {
        e.preventDefault();
    }
    
    handleTouchEnd(e) {
        e.preventDefault();
    }
    
    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ü–ö
    handlePieceMouseStart(e) {
        const pieceElement = e.target.closest('.piece-item');
        if (!pieceElement) return;
        
        const pieceId = pieceElement.dataset.pieceId;
        const piece = this.availablePieces.find(p => p.uniqueId === pieceId);
        
        if (piece) {
            // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä—É –ø—Ä–∏ –∫–ª–∏–∫–µ
            this.selectPiece(piece, pieceElement);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—É—é —Ñ–∏–≥—É—Ä—É
            this.draggedPiece = piece;
            this.isDragging = true;
            pieceElement.classList.add('dragging');
            
            this.dragOffset = {
                x: e.offsetX,
                y: e.offsetY
            };
            
            e.preventDefault();
        }
    }
    
    handlePieceMouseMove(e) {
        if (!this.isDragging || !this.draggedPiece) return;
        
        const canvasRect = this.canvas.getBoundingClientRect();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ canvas
        const canvasX = e.clientX - canvasRect.left;
        const canvasY = e.clientY - canvasRect.top;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü
        const gridX = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasX / this.CELL_SIZE)));
        const gridY = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasY / this.CELL_SIZE)));
        
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Ñ–∏–≥—É—Ä—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        this.drawWithPreview(gridX, gridY, this.canPlacePiece(this.draggedPiece, gridX, gridY));
        
        e.preventDefault();
    }
    
    handlePieceMouseEnd(e) {
        if (!this.isDragging || !this.draggedPiece) return;
        
        const canvasRect = this.canvas.getBoundingClientRect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞–¥ canvas (—Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ UX)
        const margin = 10; // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –≤ 10px
        if (e.clientX >= canvasRect.left - margin && e.clientX <= canvasRect.right + margin &&
            e.clientY >= canvasRect.top - margin && e.clientY <= canvasRect.bottom + margin) {
            
            const canvasX = e.clientX - canvasRect.left;
            const canvasY = e.clientY - canvasRect.top;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Math.round –≤–º–µ—Å—Ç–æ Math.floor –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            // –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            const gridX = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasX / this.CELL_SIZE)));
            const gridY = Math.max(0, Math.min(this.BOARD_SIZE - 1, Math.round(canvasY / this.CELL_SIZE)));
            
            if (this.canPlacePiece(this.draggedPiece, gridX, gridY)) {
                this.placePiece(this.draggedPiece, gridX, gridY);
            }
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isDragging = false;
        this.draggedPiece = null;
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dragging —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.piece-item').forEach(el => {
            el.classList.remove('dragging');
        });
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ñ–∏–≥—É—Ä—ã
        this.clearSelection();
        
        this.draw();
        e.preventDefault();
    }
    
    canPlacePiece(piece, x, y) {
        for (let py = 0; py < piece.shape.length; py++) {
            for (let px = 0; px < piece.shape[py].length; px++) {
                if (piece.shape[py][px]) {
                    const boardX = x + px;
                    const boardY = y + py;
                    
                    if (boardX < 0 || boardX >= this.BOARD_SIZE || 
                        boardY < 0 || boardY >= this.BOARD_SIZE || 
                        this.board[boardY][boardX]) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    
    placePiece(piece, x, y) {
        if (!this.canPlacePiece(piece, x, y)) {
            return false;
        }
        
        // –†–∞–∑–º–µ—â–∞–µ–º —Ñ–∏–≥—É—Ä—É –Ω–∞ –¥–æ—Å–∫–µ
        for (let py = 0; py < piece.shape.length; py++) {
            for (let px = 0; px < piece.shape[py].length; px++) {
                if (piece.shape[py][px]) {
                    const boardX = x + px;
                    const boardY = y + py;
                    this.board[boardY][boardX] = 1;
                }
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
        this.availablePieces = this.availablePieces.filter(p => p.uniqueId !== piece.uniqueId);
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
        this.clearSelection();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
        this.checkLines();
        
        // –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
        if (this.availablePieces.length === 0) {
            this.generatePieces();
        } else {
            this.renderPieces(false); // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏
        }
        
        this.draw();
        this.updateUI();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã
        this.saveGameState();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        this.checkGameOver();
        
        return true;
    }
    
    checkLines() {
        let linesCleared = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏
        for (let y = 0; y < this.BOARD_SIZE; y++) {
            if (this.board[y].every(cell => cell === 1)) {
                this.board[y].fill(0);
                linesCleared++;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã
        for (let x = 0; x < this.BOARD_SIZE; x++) {
            if (this.board.every(row => row[x] === 1)) {
                for (let y = 0; y < this.BOARD_SIZE; y++) {
                    this.board[y][x] = 0;
                }
                linesCleared++;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 9 —Ä–µ–≥–∏–æ–Ω–æ–≤ 3x3 (–∫–∞–∫ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—É–¥–æ–∫—É)
        const regionsToCheck = [
            { startX: 0, startY: 0 },   // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
            { startX: 3, startY: 0 },   // –í–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            { startX: 6, startY: 0 },   // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
            { startX: 0, startY: 3 },   // –°—Ä–µ–¥–Ω–∏–π –ª–µ–≤—ã–π
            { startX: 3, startY: 3 },   // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            { startX: 6, startY: 3 },   // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∞–≤—ã–π
            { startX: 0, startY: 6 },   // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
            { startX: 3, startY: 6 },   // –ù–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            { startX: 6, startY: 6 }    // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
        ];
        
        for (let region of regionsToCheck) {
            if (this.isRegionFilled(region.startX, region.startY)) {
                this.clearRegion(region.startX, region.startY);
                linesCleared++;
            }
        }
        
        if (linesCleared > 0) {
            const oldLevel = this.level;
            this.lines += linesCleared;
            this.score += linesCleared * 10 * this.level;
            this.level = Math.floor(this.lines / 20) + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 10 –¥–æ 20 –ª–∏–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if (this.level > oldLevel) {
                this.showLevelUpCompliment();
            }
            
            this.updateUI();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ª–∏–Ω–∏–π
            this.saveGameState();
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ 3x3 —Ä–µ–≥–∏–æ–Ω
    isRegionFilled(startX, startY) {
        for (let y = startY; y < startY + 3; y++) {
            for (let x = startX; x < startX + 3; x++) {
                if (this.board[y][x] !== 1) {
                    return false;
                }
            }
        }
        return true;
    }
    
    // –û—á–∏—â–∞–µ—Ç 3x3 —Ä–µ–≥–∏–æ–Ω
    clearRegion(startX, startY) {
        for (let y = startY; y < startY + 3; y++) {
            for (let x = startX; x < startX + 3; x++) {
                this.board[y][x] = 0;
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
    hasAvailableMoves() {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–≥—É—Ä, –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ (–±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ)
        if (this.availablePieces.length === 0) {
            return true;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        const freeCells = this.getFreeCells();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ñ–∏–≥—É—Ä—É
        for (let piece of this.availablePieces) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            for (let cell of freeCells) {
                if (this.canPlacePiece(piece, cell.x, cell.y)) {
                    return true; // –ù–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                }
            }
        }
        
        return false; // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤
    }
    
    // –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ –¥–æ—Å–∫–µ
    getFreeCells() {
        const freeCells = [];
        for (let y = 0; y < this.BOARD_SIZE; y++) {
            for (let x = 0; x < this.BOARD_SIZE; x++) {
                if (this.board[y][x] === 0) {
                    freeCells.push({ x, y });
                }
            }
        }
        return freeCells;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    checkGameOver() {
        if (!this.gameRunning) {
            return; // –ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã
        if (!this.hasAvailableMoves()) {
            this.gameOver();
        }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤
    countAvailableMoves() {
        if (this.availablePieces.length === 0) {
            return 0;
        }
        
        let moveCount = 0;
        const freeCells = this.getFreeCells();
        
        for (let piece of this.availablePieces) {
            for (let cell of freeCells) {
                if (this.canPlacePiece(piece, cell.x, cell.y)) {
                    moveCount++;
                }
            }
        }
        
        return moveCount;
    }
    
    getCurrentColor() {
        if (document.body.classList.contains('pink-theme')) {
            return '#e91e63';
        } else if (document.body.classList.contains('blue-theme')) {
            return '#2196f3';
        }
        return '#007AFF'; // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ iOS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    drawWithPreview(previewX, previewY, canPlace = true) {
        this.draw();
        
        if (this.draggedPiece) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            if (canPlace) {
                this.ctx.fillStyle = this.draggedPiece.color;
                this.ctx.globalAlpha = 0.7;
            } else {
                this.ctx.fillStyle = '#ff4444'; // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å
                this.ctx.globalAlpha = 0.5;
            }
            
            for (let py = 0; py < this.draggedPiece.shape.length; py++) {
                for (let px = 0; px < this.draggedPiece.shape[py].length; px++) {
                    if (this.draggedPiece.shape[py][px]) {
                        const x = (previewX + px) * this.CELL_SIZE;
                        const y = (previewY + py) * this.CELL_SIZE;
                        
                        this.ctx.fillRect(x + 1, y + 1, this.CELL_SIZE - 2, this.CELL_SIZE - 2);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        this.ctx.strokeStyle = canPlace ? '#4a5568' : '#ff0000';
                        this.ctx.lineWidth = 1;
                        this.ctx.strokeRect(x + 1, y + 1, this.CELL_SIZE - 2, this.CELL_SIZE - 2);
                    }
                }
            }
            
            this.ctx.globalAlpha = 1;
        }
    }
    
    draw() {
        // –û—á–∏—â–∞–µ–º canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É —Å—É–¥–æ–∫—É
        this.drawSudokuGrid();
        
        // –†–∏—Å—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
        this.drawBoard();
    }
    
    drawSudokuGrid() {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ 2, 4, 5, 6, 8
        this.drawRegionBackgrounds();
        
        this.ctx.strokeStyle = '#e5e5e5';
        this.ctx.lineWidth = 1;
        
        // –†–∏—Å—É–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ–ª—â–∏–Ω—ã (–æ–±—ã—á–Ω–∞—è —Å–µ—Ç–∫–∞)
        for (let i = 0; i <= this.BOARD_SIZE; i++) {
            const pos = i * this.CELL_SIZE;
            
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            this.ctx.beginPath();
            this.ctx.moveTo(pos, 0);
            this.ctx.lineTo(pos, this.canvas.height);
            this.ctx.stroke();
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            this.ctx.beginPath();
            this.ctx.moveTo(0, pos);
            this.ctx.lineTo(this.canvas.width, pos);
            this.ctx.stroke();
        }
    }
    
    drawRegionBackgrounds() {
        this.ctx.fillStyle = '#e9eef5';
        
        // –†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∑–∞–ª–∏–≤–∫–∏: 2, 4, 5, 6, 8
        const regionsToFill = [
            { startX: 3, startY: 0 },   // –†–µ–≥–∏–æ–Ω 2: –í–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            { startX: 0, startY: 3 },   // –†–µ–≥–∏–æ–Ω 4: –°—Ä–µ–¥–Ω–∏–π –ª–µ–≤—ã–π
            { startX: 3, startY: 3 },   // –†–µ–≥–∏–æ–Ω 5: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
            { startX: 6, startY: 3 },   // –†–µ–≥–∏–æ–Ω 6: –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∞–≤—ã–π
            { startX: 3, startY: 6 }     // –†–µ–≥–∏–æ–Ω 8: –ù–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π
        ];
        
        for (let region of regionsToFill) {
            const x = region.startX * this.CELL_SIZE;
            const y = region.startY * this.CELL_SIZE;
            const size = 3 * this.CELL_SIZE;
            
            this.ctx.fillRect(x, y, size, size);
        }
    }
    
    drawBoard() {
        const color = this.getCurrentColor();
        
        for (let y = 0; y < this.BOARD_SIZE; y++) {
            for (let x = 0; x < this.BOARD_SIZE; x++) {
                if (this.board[y][x]) {
                    this.ctx.fillStyle = color;
                    this.ctx.fillRect(x * this.CELL_SIZE + 1, y * this.CELL_SIZE + 1, 
                                    this.CELL_SIZE - 2, this.CELL_SIZE - 2);
                }
            }
        }
    }
    
    updateUI() {
        document.getElementById('levelDisplay').textContent = this.level;
        document.getElementById('record').textContent = this.record;
        document.getElementById('currentScore').textContent = this.score;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    showLevelUpCompliment() {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
        const randomCompliment = this.compliments[Math.floor(Math.random() * this.compliments.length)];
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
        const complimentElement = document.createElement('div');
        complimentElement.className = 'level-up-compliment';
        complimentElement.innerHTML = `
            <div class="compliment-content">
                <div class="level-badge">–£—Ä–æ–≤–µ–Ω—å ${this.level}! üéâ</div>
                <div class="compliment-text">${randomCompliment}</div>
                <button class="compliment-close">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(complimentElement);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            complimentElement.classList.add('show');
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = complimentElement.querySelector('.compliment-close');
        closeBtn.addEventListener('click', () => {
            complimentElement.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(complimentElement);
            }, 300);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (document.body.contains(complimentElement)) {
                complimentElement.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(complimentElement)) {
                        document.body.removeChild(complimentElement);
                    }
                }, 300);
            }
        }, 5000);
    }
    
    clearBoard() {
        this.board = Array(this.BOARD_SIZE).fill().map(() => Array(this.BOARD_SIZE).fill(0));
        this.draw();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–æ—Å–∫–∏
        this.saveGameState();
    }
    
    
    gameOver() {
        this.gameRunning = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥
        const isNewRecord = this.saveRecord(this.score);
        
        const gameOverElement = document.getElementById('gameOver');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        if (isNewRecord) {
            gameOverElement.innerHTML = `
                <h2>üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!</h2>
                <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥:</p>
                <div class="final-score">${this.score}</div>
                <p class="record-info">–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: ${this.record - this.score}</p>
                <button id="restartGameBtn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            `;
        } else {
            gameOverElement.innerHTML = `
                <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
                <p>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</p>
                <div class="final-score">${this.score}</div>
                <p class="record-info">–†–µ–∫–æ—Ä–¥: ${this.record}</p>
                <button id="restartGameBtn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            `;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const restartBtn = document.getElementById('restartGameBtn');
        if (restartBtn) {
            restartBtn.addEventListener('click', () => {
                this.restart();
            });
        }
        
        gameOverElement.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.updateUI();
    }
    
    restart() {
        this.board = Array(this.BOARD_SIZE).fill().map(() => Array(this.BOARD_SIZE).fill(0));
        this.score = 0;
        this.level = 1;
        this.lines = 0;
        this.gameRunning = true;
        this.draggedPiece = null;
        this.isDragging = false;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        this.clearSelection();
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        this.clearGameState();
        
        document.getElementById('gameOver').style.display = 'none';
        this.updateUI();
        this.generatePieces();
        this.draw();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.restartGame = function() {
    if (window.game) {
        window.game.restart();
    }
};

// Theme switching functionality
class ThemeManager {
    constructor() {
        this.currentTheme = 'red'; // red, pink, blue
        this.themes = ['red', 'pink', 'blue'];
        this.themeIndex = 0;
        this.init();
    }
    
    init() {
        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => this.switchTheme());
        }
        
        // Load saved theme
        const savedTheme = localStorage.getItem('sudokuTetrisTheme');
        if (savedTheme && this.themes.includes(savedTheme)) {
            this.setTheme(savedTheme);
        }
    }
    
    switchTheme() {
        this.themeIndex = (this.themeIndex + 1) % this.themes.length;
        const newTheme = this.themes[this.themeIndex];
        this.setTheme(newTheme);
        localStorage.setItem('sudokuTetrisTheme', newTheme);
    }
    
    setTheme(theme) {
        // Remove all theme classes
        document.body.classList.remove('pink-theme', 'blue-theme');
        
        if (theme === 'pink') {
            document.body.classList.add('pink-theme');
            this.updatePieceColors('#e91e63');
        } else if (theme === 'blue') {
            document.body.classList.add('blue-theme');
            this.updatePieceColors('#2196f3');
        } else {
            this.updatePieceColors('#e74c3c');
        }
        
        this.currentTheme = theme;
    }
    
    updatePieceColors(color) {
        // Update piece colors in the game
        if (window.game && window.game.tetrisPieces) {
            window.game.tetrisPieces.forEach(piece => {
                piece.color = color;
            });
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–≥—É—Ä
            if (window.game.availablePieces) {
                window.game.availablePieces.forEach(piece => {
                    piece.color = color;
                });
            }
            window.game.draw();
            window.game.renderPieces(false);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
let game;
let themeManager;
window.addEventListener('load', () => {
    game = new MobileSudokuTetris();
    window.game = game; // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    themeManager = new ThemeManager();
});